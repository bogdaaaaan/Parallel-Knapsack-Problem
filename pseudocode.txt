
matrix = [rows][cols]
chunks = [threads_count][chunk_size]
threads_list = [threads_count]

for t in range(threads_count):
    t = Thread()
    threads_list.append(t)

for 1 in range(rows):

    for t in threads_list:
        t.start()

    for 1 in range(cols)
        do things


create matrix (global object)
create chunks (list of indexes each thread will compute)
create empty list of threads
create threads, give each one info about items and it's chunk

fill threads list

for each row (beside first):
    fill each thread with new data (current row index)

    for each thread in thread list:
        thread.compute_work()

    wait till all threads done computing and we have full data about current row
    goto next iteration

get result from matrix



('Sequential knapsack',)
('time to compute:', 16.246999979019165)
('max value is: ', 17654)
('Sequential knapsack',)
('time to compute:', 15.821000099182129)
('max value is: ', 17654

('Parallel knapsack, threads amount:', 1)
('time to compute:', 18.51199984550476)
('max value is: ', 17654)
('Parallel knapsack, threads amount:', 1)
('time to compute:', 18.87000012397766)
('max value is: ', 17654)

('Parallel knapsack, threads amount:', 2)
('time to compute:', 18.217000007629395)
('max value is: ', 17654)
('Parallel knapsack, threads amount:', 2)
('time to compute:', 19.17200016975403)
('max value is: ', 17654)

('Parallel knapsack, threads amount:', 4)
('time to compute:', 17.806999921798706)
('max value is: ', 17654)
('Parallel knapsack, threads amount:', 4)
('time to compute:', 18.699000120162964)
('max value is: ', 17654)

('Parallel knapsack, threads amount:', 8)
('time to compute:', 17.84599995613098)
('max value is: ', 17654)
('Parallel knapsack, threads amount:', 24)
('time to compute:', 17.638000011444092)
('max value is: ', 17654)
('Parallel knapsack, threads amount:', 100)
('time to compute:', 18.805999994277954)
('max value is: ', 17654)